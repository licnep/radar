<?php

#$codalfa = $_GET['codalfa'];
#$indicatore = $_GET['indicatore'];

#$data['codalfa'] = "A2A";
#$data['indicatore'] = "totalturnover";
$codalfa = "A2A";
$indicatore = "totalturnover";
?>  

<!-- Resources -->
<script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="https://www.amcharts.com/lib/3/serial.js"></script>
<script src="https://www.amcharts.com/lib/3/amstock.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
<link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
<script src="https://www.amcharts.com/lib/3/themes/black.js"></script>

<div class="panel">
    <ul id="indicatori" class="nav nav-tabs">
    <!-- Num.Trade 30	Contr.Medio 30	Market Delta 30	Market Buy % 30	Volatilità	Spread 30	Impatto Book	Impatto Buy	Impatto Sell -->
    <!-- "totalturnover", "turnover30", "numberoftrades30", "averageturnover30", "marketorderdelta30", "marketbuypercentage30", "standarddeviation", "spread30", "bookimpact30", "bookimpactbuy30", "bookimpactsell30"-->
      <li role="presentation" id="totalturnover" class="active" onclick="indicatore='totalturnover';get_data();"><a href="#">Controvalore totale</a></li>
      <li role="presentation" id="turnover30" ><a href="#" onclick="indicatore='turnover30';get_data()">Controvalore30</a></li>
      <li role="presentation" id="numberoftrades30" ><a href="#" onclick="indicatore='numberoftrades30';get_data()"># Trades</a></li>
      <li role="presentation" id="averageturnover30" ><a href="#" onclick="indicatore='averageturnover30';get_data()">Controvalore medio</a></li>
      <li role="presentation" id="marketbuypercentage30" ><a href="#" onclick="indicatore='marketbuypercentage30';get_data()">Buy %</a></li>
      <li role="presentation" id="standarddeviation" ><a href="#" onclick="indicatore='standarddeviation';get_data()">Volatilità</a></li>
      <li role="presentation" id="spread30" ><a href="#" onclick="indicatore='spread30';get_data()">Spread</a></li>
      <li role="presentation" id="bookimpactbuy30" ><a href="#" onclick="indicatore='bookimpactbuy30';get_data()">Impatto buy</a></li>
      <li role="presentation" id="bookimpactsell30" ><a href="#" onclick="indicatore='bookimpactsell30';get_data()">Impatto sell</a></li>
    </ul>
    <div style="padding-top:20px;padding-bottom:20px;">
        <div id="chartdiv" style="width:100%;min-height:500px;"></div>
    </div>
</div>

<!-- Chart code -->
<script>

var chart = AmCharts.makeChart( "chartdiv", {
  "type": "stock",
  "theme": "black",
  "dataSets": [ {
      "title": "storico",
      "fieldMappings": [ {
        "fromField": "value",
        "toField": "value"
      }, {
        "fromField": "price",
        "toField": "price"
      } ],
      "dataProvider": [],
      "categoryField": "date"
    }, {
      "title": "daily",
      "fieldMappings": [ {
        "fromField": "value",
        "toField": "value"
      }, {
        "fromField": "price",
        "toField": "price"
      } ],
      "dataProvider": [],
      "categoryField": "date",
      "compared": true
    }
  ],

  "panelsSettings": {
    "recalculateToPercents": "never",
    "usePrefixes": true,
    "marginRight": 20,
    "marginLeft": 20
/*    "marginTop": 20,
    "marginBottom": 20*/
    //"autoMarginOffset": 20,
  },

  "valueAxesSettings": {
    "unit": "€",
    "unitPosition": "left"
  },

  "panels": [ {
    "showCategoryAxis": false,
    "title": "Controvalore totale",
    "percentHeight": 60,
    "mouseWheelZoomEnabled": true,
    "stockGraphs": [ {
      "id": "g1",
      "valueField": "value",
      "type": "smoothedLine",
      "fillAlphas": 0.2,
      "comparable": true,
      "compareField": "value",
      "balloonText": "[[title]]:<b> € [[value]]</b>",
      "compareGraphBalloonText": "[[title]]:<b> € [[value]]</b>"
    }],
    "stockLegend": {
      //"periodValueTextComparing": "[[percents.value.close]]%",
      //"periodValueTextRegular": "[[value.close]]"
      "periodValueTextComparing": "[[value]]",
      "periodValueTextRegular": "[[value]]"
    }
  }, {
    "title": "Prezzo",
    "percentHeight": 40,/*
    "dataProvider": [{"date": "2017-08-13 09:01:06","volume": 14719},
{"date": "2017-08-13 09:01:06","volume": 16400},
{"date": "2017-08-13 09:01:06","volume": 24784},
{"date": "2017-08-13 09:01:06","volume": 25692},
{"date": "2017-08-13 09:01:10","volume": 26980},
{"date": "2017-08-13 09:02:22","volume": 28802},
{"date": "2017-08-13 09:02:34","volume": 40067},
{"date": "2017-08-13 09:02:34","volume": 57233},
{"date": "2017-08-13 09:05:18","volume": 59263},
{"date": "2017-08-13 09:05:56","volume": 60064},
{"date": "2017-08-13 09:05:56","volume": 69461},
{"date": "2017-08-13 09:06:04","volume": 70626},
{"date": "2017-08-13 09:06:38","volume": 70726}],*/
    "stockGraphs": [ {
      "valueField": "price",
//      "type": "smoothedLine",
      "showBalloon": false,
      "useDataSetColors": false,
      "lineColor": "white"
      //"fillAlphas": 1
    } ],
    "stockLegend": {
      "periodValueTextRegular": "[[price]]"
    }
  } ],

  "chartScrollbarSettings": {
    "graph": "g1",
    "usePeriod": "ss",
  },

  "chartCursorSettings": {
    "valueBalloonsEnabled": true,
    "fullWidth": true,
    "cursorAlpha": 0.1,
    "valueLineBalloonEnabled": true,
    "valueLineEnabled": true,
    "valueLineAlpha": 0.5
  },
/*
  "periodSelector": {
    "position": "left",
    "periods": [ {
      "period": "MM",
      "selected": true,
      "count": 1,
      "label": "1 month"
    }, {
      "period": "YYYY",
      "count": 1,
      "label": "1 year"
    }, {
      "period": "YTD",
      "label": "YTD"
    }, {
      "period": "MAX",
      "label": "MAX"
    } ]
  },*/
/*
  "dataSetSelector": {
    "position": "left"
  },*/

    "categoryField": "date",
    "categoryAxis": {
        "parseDates": true,
        "dashLength": 1,
        "minorGridEnabled": true,
        "minPeriod": "ss"
    },
    "categoryAxesSettings": {
        "minPeriod": "ss"
    },

  "export": {
    "enabled": false
  }
} );

var all_data = [];

var historical_data = [];

var indicatore = "totalturnover";
var codalfa = "A2A";

function get_daily() {
    $.ajax({
      url: "http://auroraft.com/json_api.php?codalfa="+codalfa+"&indicatore="+indicatore,
      dataType: "jsonp",
      success: function( data ) {
        console.log("GOT daily DATA!");
        all_data = data['data'];
        console.log(all_data);
        var daily_data = all_data.splice(0,300);
        var dd = [];
        for (i in daily_data) {
            if (i < chart.dataSets[ 0 ].dataProvider.length) {
                daily_data[i]['date'] = chart.dataSets[ 0 ].dataProvider[i]['date'];
                dd.push(daily_data[i]);
                chart.dataSets[ 0 ].dataProvider[i]['price'] = daily_data[i]['price'];
            }
        }
        console.log(dd);
        //chart.dataSets[ 1 ].dataProvider = daily_data;
        chart.dataSets[ 1 ].dataProvider = dd;
        chart.validateData();
      }
    });
}

function get_hist() {
    $.ajax({
      url: "http://auroraft.com/json_api.php?codalfa="+codalfa+"&indicatore="+indicatore+"&hist=true",
      dataType: "jsonp",
      success: function( data ) {
        console.log("GOT historical DATA!");
        //console.log(data);
        historical_data = data['data'];
        var dateS = new Date().toISOString().slice(0,10) + " ";
        for (i in historical_data) {
            historical_data[i]['date'] = dateS + historical_data[i]['date'];
        }
        console.log(historical_data);
        //chart.dataSets[ 0 ].dataProvider = historical_data;
        //chart.validateData();
        var daily_data = all_data.splice(0,30);

        chart.dataSets[ 0 ].dataProvider = historical_data;
        chart.validateNow(); //also changes the title etc.
      }
    });
}

function get_data() {
    chart.panels[0].title = codalfa + " - " + indicatore;
    $('#indicatori li').removeClass('active');
    $('#'+indicatore).addClass('active');
    get_hist();
    get_daily();

}

get_data();

//chart.dataProvider = historical_data;




//chart.dataProvider = chart.dataProvider.concat( all_data.splice(0,30) );
//chart.dataProvider = chart.dataProvider.concat( daily_data );

//chart.dataProvider = chart.dataProvider.concat( historical_data );
/*
function combine_data() {
    var d = [];
    d = daily_data.concat(historical_data);
    return d;
}
*/
//prevent new data from resetting the chart zoom:

chart.ignoreZoomed = false;
chart.addListener("zoomed", function(event) {
  if (chart.ignoreZoomed) {
    chart.ignoreZoomed = false;
    return;
  }
  /*console.log(event.endDate);
  var lastDate = chart.dataProvider[chart.dataProvider.length-1];
  console.log(lastDate);
  if (event.endDate ==   lastDate) {
      console.log("UGUALIII");
  }*/
  chart.zoomStartDate = event.startDate;
  chart.zoomEndDate = event.endDate;
});

/*
chart.addListener("dataUpdated", function(event) {
  //console.log(chart.zoomStartDate);
    if (chart.zoomStartDate) {
      chart.zoomToDates(chart.zoomStartDate, chart.zoomEndDate);
    }
});*/

setInterval( function() {
  //chart.dataProvider.shift();
    /*daily_data.push( all_data.shift() );
    daily_data.push( all_data.shift() );
    daily_data.push( all_data.shift() );
    daily_data.push( all_data.shift() );
    daily_data.push( all_data.shift() );*/

    //chart.dataSets[ 1 ].dataProvider = daily_data;
    chart.dataSets[ 1 ].dataProvider.push(all_data.shift() );
    chart.dataSets[ 1 ].dataProvider.push(all_data.shift() );
    chart.dataSets[ 1 ].dataProvider.push(all_data.shift() );
    chart.dataSets[ 1 ].dataProvider.push(all_data.shift() );
    chart.dataSets[ 1 ].dataProvider.push(all_data.shift() );

    //chart.dataProvider.push( all_data.shift() );
    //chart.dataProvider = combine_data();

/*
  // add new one at the end
  day++;
  var newDate = new Date( firstDate );
  newDate.setDate( newDate.getDate() + day );
  var visits = Math.round( Math.random() * 40 ) - 20;
  chart.dataProvider.push( {
    date: newDate,
    visits: visits
  } );*/
  chart.ignoreZoomed = true;
  chart.validateData();
}, 2000 );

</script>

